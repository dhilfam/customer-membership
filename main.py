# -*- coding: utf-8 -*-
"""Customer Membership.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rfXJPFPF2rUMWi-aMI0Kw8cckBFGxxCa

# Membership Table

| **Membership** | **Discount** |                     **Another Benefit**                     |
|:--------------:|:------------:|:-----------------------------------------------------------:|
|    Platinum    |      15%     | Benefit Silver + Gold + Voucher Liburan + Cashback max. 30% |
|      Gold      |      10%     | Benefit Silver + Voucher Ojek Online                        |
|     Silver     |      8%      | Voucher Makanan                                             |

# Requirements Membership Table

| **Membership** | **Monthly Expense (juta)** | **Monthly Income (juta)** |
|:--------------:|:--------------------------:|:-------------------------:|
|    Platinum    |              8             | 15                        |
|      Gold      |              6             | 10                        |
|     Silver     |              5             | 7                         |

# Features List

- [x] `show_benefit()` --> show all membership benefit (table 1)
- [x] `show_requirements()` --> show all requirements untuk menjadi membership (table 2)
- [x] `predict_membership(monthly_expense, monthly_income)` --> memprediksi user akan masuk ke dalam membership mana berdasarkan input parameter dan parameter masing - masing membership
- [x] `calculate_price(membership, list_harga_barang)` --> menghitung final price yang harus dibayarkan, terus akan mendapatkan diskon sesuai dengan ketentuan membership

# Import Library
"""

# %pip install tabulate
# untuk membuat table
from tabulate import tabulate

# square root, untuk menghitung euclidean distance
from math import sqrt

"""# Create Membership Class"""

class Membership:

    # inisialisasi data
    data = {
        "Sumbul": "Platinum",
        "Ana": "Gold",
        "Cahya": "Platinum"
    }

    # inisialisai attribute
    def __init__(self, username):
        self.username = username

    # method untuk menampilkan benefit membership
    def show_benefit(self):
        tables = [
            ["Platinum", "15%", "Benefit Gold + Silver + Cashback max. 30%"],
            ["Gold", "10%", "Benefit Silver + Voucher Ojek Online"],
            ["Silver", "8%", "Voucher Makanan"],
        ]

        headers = ["Membership", "Discount", "Another Benefit"]

        print("Benefit Membership PacCommerce\n")
        # print("")
        print(tabulate(tables, headers, tablefmt='github', stralign="center"))

    # method untuk menampilkan requirements membership
    def show_requirements(self):
        tables = [
            ["Platinum", 8, 15],
            ["Gold", 6, 10],
            ["Silver", 5, 7],
        ]

        headers = ["Membership", "Monthly Expense (juta)", "Monthly Income (juta)"]

        print("Requirements Membership PacCommerce\n")
        # print("")
        print(tabulate(tables, headers, tablefmt='github', numalign="center"))

    # method untuk melakukan prediksi membership
    # menggunakan euclidean distance
    def predict_membership(self, username,
                           monthly_expense,
                           monthly_income):

        res = []

        membership_parameter = [[8, 15], [6, 10], [5, 7]]

        for index, _ in enumerate(membership_parameter):
            tmp = round(sqrt((monthly_expense - membership_parameter[index][0])**2 + (monthly_income - membership_parameter[index][1])**2), 2)

            res.append(tmp)

        res_dict = {
            "Platinum": res[0],
            "Gold": res[1],
            "Silver": res[2]
        }

        print(f"Hasil perhitungan Euclidean Distance dari user {self.username} adalah {res_dict}")

        for member, distance in res_dict.items():
            if distance == min(res):
                self.data[username] = member
                return member

    # method untuk menampilkan membership yang dimiliki
    # dari database yang dimiliki
    def show_membership(self, username):
        if username in self.data:
            return self.data.get(username)


    # method untuk menghitung final price berdasarkan membership
    def calculate_price(self, username, list_harga):

        try:
            if username in self.data:
                membership = self.data.get(username)
                if membership == "Platinum":
                    total_harga = sum(list_harga) - (sum(list_harga) * 0.15)
                    return total_harga

                elif membership == "Gold":
                    total_harga = sum(list_harga) - (sum(list_harga) * 0.10)
                    return total_harga

                elif membership == "Silver":
                    total_harga = sum(list_harga) - (sum(list_harga) * 0.08)
                    return total_harga

                else:
                    raise Exception("Membership doesn't exist")

            else:
                raise Exception("Membership tidak ada di database")

        except:
            raise Exception("Invalid process")

# membuat Instance
user_1 = Membership("Fadhil")

"""## Mengecek data yang ada"""

user_1.data

"""## Test Case 1"""

user_1.show_benefit()

"""## Test Case 2"""

user_1.show_requirements()

"""## Test Case 3

Masukkan parameter monthly_expense = 9 dan monthly_income = 12
"""

user_1.predict_membership(user_1.username, 9, 12)

"""## Tampilkan data yang terbaru"""

user_1.data

"""## Tampilkan Membership berdasarkan username"""

user_1.show_membership(user_1.username)

"""## Test Case 4

Masukkan list harga barang yang harus dihitung [150_000, 200_000, 400_000]
"""

user_1.calculate_price(user_1.username, [150000, 200000, 400000])

"""## Another Test Case

Cobalah dengan existing user Ana yang ada di dalam database
"""

user_ana = Membership("Ana")

user_ana.data

user_ana.calculate_price(user_ana.username, [150000, 200000, 400000])

"""# Coba dengan User lain
- User dengan username `"Pevita"`
- `monthly_expense = 3` dan `monthly_income = 4`
- List harga barangnya `[300_000, 150_000, 1_250_000, 15_000]`
"""

user_pevita = Membership("Pevita")

user_pevita.predict_membership(user_pevita.username, 3, 4)

user_pevita.show_membership(user_pevita.username)

user_pevita.calculate_price(user_pevita.username, [300_000, 150_000, 1_250_000, 15_000])